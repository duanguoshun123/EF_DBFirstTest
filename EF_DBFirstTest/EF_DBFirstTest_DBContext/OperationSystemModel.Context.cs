//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace EF_DBFirstTest_Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OperationSystemEntities : DbContext
    {
        public OperationSystemEntities()
            : base("name=OperationSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<OnlineTime> OnlineTime { get; set; }
        public virtual DbSet<OnlineTimeFlag> OnlineTimeFlag { get; set; }
        public virtual DbSet<SpotTradeProcessingFlag> SpotTradeProcessingFlag { get; set; }
        public virtual DbSet<SyncContractDetail> SyncContractDetail { get; set; }
        public virtual DbSet<SynchronizationErrorLog> SynchronizationErrorLog { get; set; }
        public virtual DbSet<SyncSpotInventory> SyncSpotInventory { get; set; }
        public virtual DbSet<SyncSpotMortgage> SyncSpotMortgage { get; set; }
        public virtual DbSet<SyncSpotTrade> SyncSpotTrade { get; set; }
        public virtual DbSet<SyncTradeContractInfo> SyncTradeContractInfo { get; set; }
        public virtual DbSet<SyncTradeDeliveryBatch> SyncTradeDeliveryBatch { get; set; }
        public virtual DbSet<SyncTradePayment> SyncTradePayment { get; set; }
        public virtual DbSet<SyncTradePriced> SyncTradePriced { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<WFAccountEntity> WFAccountEntity { get; set; }
        public virtual DbSet<WFAccountingDataLog> WFAccountingDataLog { get; set; }
        public virtual DbSet<WFAccountingDataLogDetail> WFAccountingDataLogDetail { get; set; }
        public virtual DbSet<WFAccountingFee> WFAccountingFee { get; set; }
        public virtual DbSet<WFAccountingTask> WFAccountingTask { get; set; }
        public virtual DbSet<WFActualApprovalStep> WFActualApprovalStep { get; set; }
        public virtual DbSet<WFActualApprovalStepUser> WFActualApprovalStepUser { get; set; }
        public virtual DbSet<WFActualApprovalWF> WFActualApprovalWF { get; set; }
        public virtual DbSet<WFActualApprover> WFActualApprover { get; set; }
        public virtual DbSet<WFActualStepCondition> WFActualStepCondition { get; set; }
        public virtual DbSet<WFActuaStepAction> WFActuaStepAction { get; set; }
        public virtual DbSet<WFAdditionalConfiguration> WFAdditionalConfiguration { get; set; }
        public virtual DbSet<WFAggregateBill> WFAggregateBill { get; set; }
        public virtual DbSet<WFAggregateBillDetail> WFAggregateBillDetail { get; set; }
        public virtual DbSet<WFAmountRecord> WFAmountRecord { get; set; }
        public virtual DbSet<WFAmountRecordDetail> WFAmountRecordDetail { get; set; }
        public virtual DbSet<WFAmountRecordSubDetail> WFAmountRecordSubDetail { get; set; }
        public virtual DbSet<WFApprovalAttachment> WFApprovalAttachment { get; set; }
        public virtual DbSet<WFApprovalCancellationForm> WFApprovalCancellationForm { get; set; }
        public virtual DbSet<WFApprovalConfiguration> WFApprovalConfiguration { get; set; }
        public virtual DbSet<WFApprovalWorkflowLog> WFApprovalWorkflowLog { get; set; }
        public virtual DbSet<WFApprovalWorkflowStepTemplate> WFApprovalWorkflowStepTemplate { get; set; }
        public virtual DbSet<WFApprovalWorkflowTemplate> WFApprovalWorkflowTemplate { get; set; }
        public virtual DbSet<WFApprovalWorkflowTemplateRole> WFApprovalWorkflowTemplateRole { get; set; }
        public virtual DbSet<WFApproverTemplate> WFApproverTemplate { get; set; }
        public virtual DbSet<WFAuthorization> WFAuthorization { get; set; }
        public virtual DbSet<WFAuthorizationContent> WFAuthorizationContent { get; set; }
        public virtual DbSet<WFAvgPriceDetail> WFAvgPriceDetail { get; set; }
        public virtual DbSet<WFBillContentArchive> WFBillContentArchive { get; set; }
        public virtual DbSet<WFBillContentPrint> WFBillContentPrint { get; set; }
        public virtual DbSet<WFBillTemplate> WFBillTemplate { get; set; }
        public virtual DbSet<WFBrand> WFBrand { get; set; }
        public virtual DbSet<WFBusiness> WFBusiness { get; set; }
        public virtual DbSet<WFBusinessBillTemplate> WFBusinessBillTemplate { get; set; }
        public virtual DbSet<WFBuyContractTradeRecord> WFBuyContractTradeRecord { get; set; }
        public virtual DbSet<WFCardCodeInfo> WFCardCodeInfo { get; set; }
        public virtual DbSet<WFCargoInseparabilityConfiguration> WFCargoInseparabilityConfiguration { get; set; }
        public virtual DbSet<WFCarry> WFCarry { get; set; }
        public virtual DbSet<WFCodeCustomization> WFCodeCustomization { get; set; }
        public virtual DbSet<WFCodeTemplate> WFCodeTemplate { get; set; }
        public virtual DbSet<WFCodeTemplateDetail> WFCodeTemplateDetail { get; set; }
        public virtual DbSet<WFCommercialInvoice> WFCommercialInvoice { get; set; }
        public virtual DbSet<WFCommodity> WFCommodity { get; set; }
        public virtual DbSet<WFCommodityCategory> WFCommodityCategory { get; set; }
        public virtual DbSet<WFCommodityQuantityUnit> WFCommodityQuantityUnit { get; set; }
        public virtual DbSet<WFCommodityType> WFCommodityType { get; set; }
        public virtual DbSet<WFCommodityTypeQuantityUnit> WFCommodityTypeQuantityUnit { get; set; }
        public virtual DbSet<WFCompany> WFCompany { get; set; }
        public virtual DbSet<WFCompanyBankInfo> WFCompanyBankInfo { get; set; }
        public virtual DbSet<WFCompanyBankInfoCommodityAccountEntity> WFCompanyBankInfoCommodityAccountEntity { get; set; }
        public virtual DbSet<WFCompanyBusiness> WFCompanyBusiness { get; set; }
        public virtual DbSet<WFCompanySAPCode> WFCompanySAPCode { get; set; }
        public virtual DbSet<WFComponentVariety> WFComponentVariety { get; set; }
        public virtual DbSet<WFCondition> WFCondition { get; set; }
        public virtual DbSet<WFConditionProperty> WFConditionProperty { get; set; }
        public virtual DbSet<WFContact> WFContact { get; set; }
        public virtual DbSet<WFContactCommodityAccountEntity> WFContactCommodityAccountEntity { get; set; }
        public virtual DbSet<WFContractBillArchive> WFContractBillArchive { get; set; }
        public virtual DbSet<WFContractBillArchiveDetail> WFContractBillArchiveDetail { get; set; }
        public virtual DbSet<WFContractBillArchiveLinker> WFContractBillArchiveLinker { get; set; }
        public virtual DbSet<WFContractComment> WFContractComment { get; set; }
        public virtual DbSet<WFContractComponent> WFContractComponent { get; set; }
        public virtual DbSet<WFContractCustomer> WFContractCustomer { get; set; }
        public virtual DbSet<WFContractDetailInfo> WFContractDetailInfo { get; set; }
        public virtual DbSet<WFContractDetailQuantity> WFContractDetailQuantity { get; set; }
        public virtual DbSet<WFContractEntryRecordDetail> WFContractEntryRecordDetail { get; set; }
        public virtual DbSet<WFContractFee> WFContractFee { get; set; }
        public virtual DbSet<WFContractFeeType> WFContractFeeType { get; set; }
        public virtual DbSet<WFContractInfo> WFContractInfo { get; set; }
        public virtual DbSet<WFContractInvoice> WFContractInvoice { get; set; }
        public virtual DbSet<WFContractLog> WFContractLog { get; set; }
        public virtual DbSet<WFContractOutRecordDetail> WFContractOutRecordDetail { get; set; }
        public virtual DbSet<WFContractPricingTerm> WFContractPricingTerm { get; set; }
        public virtual DbSet<WFContractSecondPart> WFContractSecondPart { get; set; }
        public virtual DbSet<WFContractWhole> WFContractWhole { get; set; }
        public virtual DbSet<WFCorporationApprovalWFTemplate> WFCorporationApprovalWFTemplate { get; set; }
        public virtual DbSet<WFCorporationDepartment> WFCorporationDepartment { get; set; }
        public virtual DbSet<WFCorporationTypeConfiguration> WFCorporationTypeConfiguration { get; set; }
        public virtual DbSet<WFCostPayRecord> WFCostPayRecord { get; set; }
        public virtual DbSet<WFCostPayRequest> WFCostPayRequest { get; set; }
        public virtual DbSet<WFCostPrice> WFCostPrice { get; set; }
        public virtual DbSet<WFCreditRating> WFCreditRating { get; set; }
        public virtual DbSet<WFCreditRatingDetail> WFCreditRatingDetail { get; set; }
        public virtual DbSet<WFCurrency> WFCurrency { get; set; }
        public virtual DbSet<WFCurrencyPair> WFCurrencyPair { get; set; }
        public virtual DbSet<WFCustomerCommodity> WFCustomerCommodity { get; set; }
        public virtual DbSet<WFDefaultExchangeSetting> WFDefaultExchangeSetting { get; set; }
        public virtual DbSet<WFDeliveryContract> WFDeliveryContract { get; set; }
        public virtual DbSet<WFDeliveryInDetailQuantity> WFDeliveryInDetailQuantity { get; set; }
        public virtual DbSet<WFDeliveryNotification> WFDeliveryNotification { get; set; }
        public virtual DbSet<WFDeliveryNotificationDetail> WFDeliveryNotificationDetail { get; set; }
        public virtual DbSet<WFDeliveryNotificationObject> WFDeliveryNotificationObject { get; set; }
        public virtual DbSet<WFDepartmentAccountEntity> WFDepartmentAccountEntity { get; set; }
        public virtual DbSet<WFDeposit> WFDeposit { get; set; }
        public virtual DbSet<WFDepositContract> WFDepositContract { get; set; }
        public virtual DbSet<WFEntityProperty> WFEntityProperty { get; set; }
        public virtual DbSet<WFEntityPropertyType> WFEntityPropertyType { get; set; }
        public virtual DbSet<WFEntitySapPart> WFEntitySapPart { get; set; }
        public virtual DbSet<WFExchangeBill> WFExchangeBill { get; set; }
        public virtual DbSet<WFExchangeRate> WFExchangeRate { get; set; }
        public virtual DbSet<WFExportTradeRecord> WFExportTradeRecord { get; set; }
        public virtual DbSet<WFExportWarehouseStorage> WFExportWarehouseStorage { get; set; }
        public virtual DbSet<WFFeeEstimate> WFFeeEstimate { get; set; }
        public virtual DbSet<WFFeeRecord> WFFeeRecord { get; set; }
        public virtual DbSet<WFFinalPrice> WFFinalPrice { get; set; }
        public virtual DbSet<WFFinancialBatch> WFFinancialBatch { get; set; }
        public virtual DbSet<WFFinancialBatchInventory> WFFinancialBatchInventory { get; set; }
        public virtual DbSet<WFFinancialBatchOutDetail> WFFinancialBatchOutDetail { get; set; }
        public virtual DbSet<WFFirePriceConfirm> WFFirePriceConfirm { get; set; }
        public virtual DbSet<WFFirePriceDetail> WFFirePriceDetail { get; set; }
        public virtual DbSet<WFFirePricePostponeConfirm> WFFirePricePostponeConfirm { get; set; }
        public virtual DbSet<WFFirePriceRecord> WFFirePriceRecord { get; set; }
        public virtual DbSet<WFFutureTradeRecord> WFFutureTradeRecord { get; set; }
        public virtual DbSet<WFGeneralModification> WFGeneralModification { get; set; }
        public virtual DbSet<WFGeneralModificationDetail> WFGeneralModificationDetail { get; set; }
        public virtual DbSet<WFHedgeMatch> WFHedgeMatch { get; set; }
        public virtual DbSet<WFInstrument> WFInstrument { get; set; }
        public virtual DbSet<WFInstrumentCategory> WFInstrumentCategory { get; set; }
        public virtual DbSet<WFInstrumentSettlementPrice> WFInstrumentSettlementPrice { get; set; }
        public virtual DbSet<WFInventoryAdjustmentRequest> WFInventoryAdjustmentRequest { get; set; }
        public virtual DbSet<WFInvoiceDetailQuantity> WFInvoiceDetailQuantity { get; set; }
        public virtual DbSet<WFInvoiceObject> WFInvoiceObject { get; set; }
        public virtual DbSet<WFInvoiceRecord> WFInvoiceRecord { get; set; }
        public virtual DbSet<WFInvoiceRequest> WFInvoiceRequest { get; set; }
        public virtual DbSet<WFInvoiceRequestDetail> WFInvoiceRequestDetail { get; set; }
        public virtual DbSet<WFLcContract> WFLcContract { get; set; }
        public virtual DbSet<WFLetterOfCredit> WFLetterOfCredit { get; set; }
        public virtual DbSet<WFLoginHistory> WFLoginHistory { get; set; }
        public virtual DbSet<WFLongContract> WFLongContract { get; set; }
        public virtual DbSet<WFLongContractDetail> WFLongContractDetail { get; set; }
        public virtual DbSet<WFMarketCalendar> WFMarketCalendar { get; set; }
        public virtual DbSet<WFMoneyConversion> WFMoneyConversion { get; set; }
        public virtual DbSet<WFMultiPrecursorBatch> WFMultiPrecursorBatch { get; set; }
        public virtual DbSet<WFOfficeAddress> WFOfficeAddress { get; set; }
        public virtual DbSet<WFOrderInfo> WFOrderInfo { get; set; }
        public virtual DbSet<WFOtherBill> WFOtherBill { get; set; }
        public virtual DbSet<WFOurPlantTransferWarehouseNotification> WFOurPlantTransferWarehouseNotification { get; set; }
        public virtual DbSet<WFOurPlantTransferWarehouseNotificationDetail> WFOurPlantTransferWarehouseNotificationDetail { get; set; }
        public virtual DbSet<WFOutRecordAssistantMeasureInfo> WFOutRecordAssistantMeasureInfo { get; set; }
        public virtual DbSet<WFPaymentProposal> WFPaymentProposal { get; set; }
        public virtual DbSet<WFPaymentProposalDetail> WFPaymentProposalDetail { get; set; }
        public virtual DbSet<WFPaymentProposalSubDetail> WFPaymentProposalSubDetail { get; set; }
        public virtual DbSet<WFPayRequest> WFPayRequest { get; set; }
        public virtual DbSet<WFPayRequestDetail> WFPayRequestDetail { get; set; }
        public virtual DbSet<WFPayRequestSubDetail> WFPayRequestSubDetail { get; set; }
        public virtual DbSet<WFPledgeContract> WFPledgeContract { get; set; }
        public virtual DbSet<WFPledgeInfo> WFPledgeInfo { get; set; }
        public virtual DbSet<WFPledgeRenewal> WFPledgeRenewal { get; set; }
        public virtual DbSet<WFPledgeRenewalDetail> WFPledgeRenewalDetail { get; set; }
        public virtual DbSet<WFPost> WFPost { get; set; }
        public virtual DbSet<WFPostingInfo> WFPostingInfo { get; set; }
        public virtual DbSet<WFPostingInfoDetail> WFPostingInfoDetail { get; set; }
        public virtual DbSet<WFPriceConfirmationLetter> WFPriceConfirmationLetter { get; set; }
        public virtual DbSet<WFPriceConfirmationLetterDetails> WFPriceConfirmationLetterDetails { get; set; }
        public virtual DbSet<WFPriceDetail> WFPriceDetail { get; set; }
        public virtual DbSet<WFPriceInfo> WFPriceInfo { get; set; }
        public virtual DbSet<WFPriceInstrument> WFPriceInstrument { get; set; }
        public virtual DbSet<WFPriceQuantityScale> WFPriceQuantityScale { get; set; }
        public virtual DbSet<WFPricingConfirmDetail> WFPricingConfirmDetail { get; set; }
        public virtual DbSet<WFQuantityType> WFQuantityType { get; set; }
        public virtual DbSet<WFReceivingClaim> WFReceivingClaim { get; set; }
        public virtual DbSet<WFRoleBusiness> WFRoleBusiness { get; set; }
        public virtual DbSet<WFRoleConditionConfiguration> WFRoleConditionConfiguration { get; set; }
        public virtual DbSet<WFRoleInfo> WFRoleInfo { get; set; }
        public virtual DbSet<WFRolePrivilege> WFRolePrivilege { get; set; }
        public virtual DbSet<WFSafetyLink> WFSafetyLink { get; set; }
        public virtual DbSet<WFSaleContractTradeRecord> WFSaleContractTradeRecord { get; set; }
        public virtual DbSet<WFSapAmountCategoryCommodity> WFSapAmountCategoryCommodity { get; set; }
        public virtual DbSet<WFSapConfiguration> WFSapConfiguration { get; set; }
        public virtual DbSet<WFSapTransaction> WFSapTransaction { get; set; }
        public virtual DbSet<WFSapTransactionMultiObject> WFSapTransactionMultiObject { get; set; }
        public virtual DbSet<WFSettlementRequest> WFSettlementRequest { get; set; }
        public virtual DbSet<WFSettlementRequestDetail> WFSettlementRequestDetail { get; set; }
        public virtual DbSet<WFSettleOption> WFSettleOption { get; set; }
        public virtual DbSet<WFSettleOptionDetail> WFSettleOptionDetail { get; set; }
        public virtual DbSet<WFSettleOptionDetailExchangeProcess> WFSettleOptionDetailExchangeProcess { get; set; }
        public virtual DbSet<WFSettleOptionDetailPaymentForm> WFSettleOptionDetailPaymentForm { get; set; }
        public virtual DbSet<WFSodEpAmountFirst> WFSodEpAmountFirst { get; set; }
        public virtual DbSet<WFSodEpConditionalRelease> WFSodEpConditionalRelease { get; set; }
        public virtual DbSet<WFSodEpDocumentsAgainstAcceptance> WFSodEpDocumentsAgainstAcceptance { get; set; }
        public virtual DbSet<WFSodEpDocumentsAgainstPayment> WFSodEpDocumentsAgainstPayment { get; set; }
        public virtual DbSet<WFSodEpLetterOfCredit> WFSodEpLetterOfCredit { get; set; }
        public virtual DbSet<WFSodPfExchangeBill> WFSodPfExchangeBill { get; set; }
        public virtual DbSet<WFSpecialFeeConfiguration> WFSpecialFeeConfiguration { get; set; }
        public virtual DbSet<WFSpecification> WFSpecification { get; set; }
        public virtual DbSet<WFSpotReceiptConvertDetailInfo> WFSpotReceiptConvertDetailInfo { get; set; }
        public virtual DbSet<WFSpotReceiptConvertInfo> WFSpotReceiptConvertInfo { get; set; }
        public virtual DbSet<WFStepActionTemplate> WFStepActionTemplate { get; set; }
        public virtual DbSet<WFStepConditionTemplate> WFStepConditionTemplate { get; set; }
        public virtual DbSet<WFStorageAssistantMeasureInfo> WFStorageAssistantMeasureInfo { get; set; }
        public virtual DbSet<WFStorageConversion> WFStorageConversion { get; set; }
        public virtual DbSet<WFStorageConversionDetail> WFStorageConversionDetail { get; set; }
        public virtual DbSet<WFSubscribeConfig> WFSubscribeConfig { get; set; }
        public virtual DbSet<WFSubscribeConfigDetail> WFSubscribeConfigDetail { get; set; }
        public virtual DbSet<WFSupplementalAgreement> WFSupplementalAgreement { get; set; }
        public virtual DbSet<WFSupplementalAgreementDetail> WFSupplementalAgreementDetail { get; set; }
        public virtual DbSet<WFSystemCodeInfo> WFSystemCodeInfo { get; set; }
        public virtual DbSet<WFSystemCodeInfoConfiguration> WFSystemCodeInfoConfiguration { get; set; }
        public virtual DbSet<WFSystemConfigDetail> WFSystemConfigDetail { get; set; }
        public virtual DbSet<WFSystemConfiguration> WFSystemConfiguration { get; set; }
        public virtual DbSet<WFSystemFee> WFSystemFee { get; set; }
        public virtual DbSet<WFSystemFeeConfiguration> WFSystemFeeConfiguration { get; set; }
        public virtual DbSet<WFSystemFinanceAccount> WFSystemFinanceAccount { get; set; }
        public virtual DbSet<WFSystemLog> WFSystemLog { get; set; }
        public virtual DbSet<WFTempData> WFTempData { get; set; }
        public virtual DbSet<WFTradeAccount> WFTradeAccount { get; set; }
        public virtual DbSet<WFTradeInstruction> WFTradeInstruction { get; set; }
        public virtual DbSet<WFTradeInstructionDetail> WFTradeInstructionDetail { get; set; }
        public virtual DbSet<WFTradeInstructionRelation> WFTradeInstructionRelation { get; set; }
        public virtual DbSet<WFTradePricing> WFTradePricing { get; set; }
        public virtual DbSet<WFTradePricingMatchDetail> WFTradePricingMatchDetail { get; set; }
        public virtual DbSet<WFTradePricingMatchRecord> WFTradePricingMatchRecord { get; set; }
        public virtual DbSet<WFUnit> WFUnit { get; set; }
        public virtual DbSet<WFUnitConversion> WFUnitConversion { get; set; }
        public virtual DbSet<WFUnPledgeInfo> WFUnPledgeInfo { get; set; }
        public virtual DbSet<WFUser> WFUser { get; set; }
        public virtual DbSet<WFUserBusiness> WFUserBusiness { get; set; }
        public virtual DbSet<WFUserCorporation> WFUserCorporation { get; set; }
        public virtual DbSet<WFUserLinker> WFUserLinker { get; set; }
        public virtual DbSet<WFUserMessage> WFUserMessage { get; set; }
        public virtual DbSet<WFUserPublishInformation> WFUserPublishInformation { get; set; }
        public virtual DbSet<WFUserRequest> WFUserRequest { get; set; }
        public virtual DbSet<WFUserRole> WFUserRole { get; set; }
        public virtual DbSet<WFUserTask> WFUserTask { get; set; }
        public virtual DbSet<WFWarehouseCalculateFeeType> WFWarehouseCalculateFeeType { get; set; }
        public virtual DbSet<WFWarehouseCardCodePrefix> WFWarehouseCardCodePrefix { get; set; }
        public virtual DbSet<WFWarehouseCompany> WFWarehouseCompany { get; set; }
        public virtual DbSet<WFWarehouseDetail> WFWarehouseDetail { get; set; }
        public virtual DbSet<WFWarehouseEntryRecord> WFWarehouseEntryRecord { get; set; }
        public virtual DbSet<WFWarehouseEntryRecordDetail> WFWarehouseEntryRecordDetail { get; set; }
        public virtual DbSet<WFWarehouseOutOrder> WFWarehouseOutOrder { get; set; }
        public virtual DbSet<WFWarehouseOutRecord> WFWarehouseOutRecord { get; set; }
        public virtual DbSet<WFWarehouseOutRecordDetail> WFWarehouseOutRecordDetail { get; set; }
        public virtual DbSet<WFWarehouseShiftingRecord> WFWarehouseShiftingRecord { get; set; }
        public virtual DbSet<WFWarehouseStorage> WFWarehouseStorage { get; set; }
        public virtual DbSet<WFWarehouseStorageHistory> WFWarehouseStorageHistory { get; set; }
        public virtual DbSet<WFWarehouseStorageItem> WFWarehouseStorageItem { get; set; }
        public virtual DbSet<WFWarehousing> WFWarehousing { get; set; }
        public virtual DbSet<WFWarehousingDetail> WFWarehousingDetail { get; set; }
        public virtual DbSet<WFWhStorageFlowTrack> WFWhStorageFlowTrack { get; set; }
        public virtual DbSet<SpotMortgageProcessingFlag> SpotMortgageProcessingFlag { get; set; }
        public virtual DbSet<View_Accounting_Fe_Broker> View_Accounting_Fe_Broker { get; set; }
        public virtual DbSet<View_Accounting_Fe_CargoUnit> View_Accounting_Fe_CargoUnit { get; set; }
        public virtual DbSet<View_Accounting_Fe_CargoUnitConversion> View_Accounting_Fe_CargoUnitConversion { get; set; }
        public virtual DbSet<View_Accounting_Fe_CommodityCategory> View_Accounting_Fe_CommodityCategory { get; set; }
        public virtual DbSet<View_Accounting_Fe_CommodityType> View_Accounting_Fe_CommodityType { get; set; }
        public virtual DbSet<View_Accounting_Fe_CommodityTypeQuantityUnit> View_Accounting_Fe_CommodityTypeQuantityUnit { get; set; }
        public virtual DbSet<View_Accounting_Fe_Corporation> View_Accounting_Fe_Corporation { get; set; }
        public virtual DbSet<View_Accounting_Fe_Currency> View_Accounting_Fe_Currency { get; set; }
        public virtual DbSet<View_Accounting_Fe_Exchange> View_Accounting_Fe_Exchange { get; set; }
        public virtual DbSet<View_Accounting_Fe_ExchangeType> View_Accounting_Fe_ExchangeType { get; set; }
        public virtual DbSet<View_Accounting_Fe_Instrument> View_Accounting_Fe_Instrument { get; set; }
        public virtual DbSet<View_Accounting_Fe_InstrumentCategory> View_Accounting_Fe_InstrumentCategory { get; set; }
        public virtual DbSet<View_Accounting_Fe_InstrumentContractFormat> View_Accounting_Fe_InstrumentContractFormat { get; set; }
        public virtual DbSet<View_Accounting_Fe_MarketCalendar> View_Accounting_Fe_MarketCalendar { get; set; }
        public virtual DbSet<View_Accounting_Fe_ProfitCenter> View_Accounting_Fe_ProfitCenter { get; set; }
        public virtual DbSet<View_Accounting_Fe_TimeZone> View_Accounting_Fe_TimeZone { get; set; }
        public virtual DbSet<View_Accounting_Fe_TradeAccount> View_Accounting_Fe_TradeAccount { get; set; }
        public virtual DbSet<View_Accounting_Fe_TradeAccountType> View_Accounting_Fe_TradeAccountType { get; set; }
        public virtual DbSet<View_Accounting_Fe_User> View_Accounting_Fe_User { get; set; }
        public virtual DbSet<View_Accounting_Lm_Instrument> View_Accounting_Lm_Instrument { get; set; }
        public virtual DbSet<View_Accounting_Lm_MarketCalendar> View_Accounting_Lm_MarketCalendar { get; set; }
        public virtual DbSet<View_Accounting_Lm_TradeAccount> View_Accounting_Lm_TradeAccount { get; set; }
        public virtual DbSet<View_Accounting_Lm_User> View_Accounting_Lm_User { get; set; }
        public virtual DbSet<ViewExchangeRate> ViewExchangeRate { get; set; }
        public virtual DbSet<ViewUnitConversion> ViewUnitConversion { get; set; }
        public virtual DbSet<ViewUnitConversionUnconfigured> ViewUnitConversionUnconfigured { get; set; }
        public virtual DbSet<ViewWFPledgeInfo> ViewWFPledgeInfo { get; set; }
        public virtual DbSet<ViewWFUnPledgeInfo> ViewWFUnPledgeInfo { get; set; }
    
        [DbFunction("OperationSystemEntities", "FnListTimeZone")]
        public virtual IQueryable<FnListTimeZone_Result> FnListTimeZone()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnListTimeZone_Result>("[OperationSystemEntities].[FnListTimeZone]()");
        }
    
        [DbFunction("OperationSystemEntities", "FnSplitStr")]
        public virtual IQueryable<FnSplitStr_Result> FnSplitStr(string str, string split)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            var splitParameter = split != null ?
                new ObjectParameter("split", split) :
                new ObjectParameter("split", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnSplitStr_Result>("[OperationSystemEntities].[FnSplitStr](@str, @split)", strParameter, splitParameter);
        }
    
        [DbFunction("OperationSystemEntities", "FnSplitStrToInt")]
        public virtual IQueryable<FnSplitStrToInt_Result> FnSplitStrToInt(string str, string split)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            var splitParameter = split != null ?
                new ObjectParameter("split", split) :
                new ObjectParameter("split", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnSplitStrToInt_Result>("[OperationSystemEntities].[FnSplitStrToInt](@str, @split)", strParameter, splitParameter);
        }
    
        [DbFunction("OperationSystemEntities", "FnSplitStrToLong")]
        public virtual IQueryable<FnSplitStrToLong_Result> FnSplitStrToLong(string str, string split)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            var splitParameter = split != null ?
                new ObjectParameter("split", split) :
                new ObjectParameter("split", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnSplitStrToLong_Result>("[OperationSystemEntities].[FnSplitStrToLong](@str, @split)", strParameter, splitParameter);
        }
    
        public virtual int CalcSyncSpotInventory(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> lastUpdateTime)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var lastUpdateTimeParameter = lastUpdateTime.HasValue ?
                new ObjectParameter("LastUpdateTime", lastUpdateTime) :
                new ObjectParameter("LastUpdateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalcSyncSpotInventory", fromDateParameter, toDateParameter, lastUpdateTimeParameter);
        }
    
        public virtual int CalcSyncSpotMortgage(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalcSyncSpotMortgage", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CalcUnpledgedContracts_Result> CalcUnpledgedContracts(Nullable<int> customerId, Nullable<short> tradeType, Nullable<int> corporationId, Nullable<int> commodityId, Nullable<int> accountingEntityId, Nullable<int> currencyId, string contractCode)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var tradeTypeParameter = tradeType.HasValue ?
                new ObjectParameter("TradeType", tradeType) :
                new ObjectParameter("TradeType", typeof(short));
    
            var corporationIdParameter = corporationId.HasValue ?
                new ObjectParameter("CorporationId", corporationId) :
                new ObjectParameter("CorporationId", typeof(int));
    
            var commodityIdParameter = commodityId.HasValue ?
                new ObjectParameter("CommodityId", commodityId) :
                new ObjectParameter("CommodityId", typeof(int));
    
            var accountingEntityIdParameter = accountingEntityId.HasValue ?
                new ObjectParameter("AccountingEntityId", accountingEntityId) :
                new ObjectParameter("AccountingEntityId", typeof(int));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalcUnpledgedContracts_Result>("CalcUnpledgedContracts", customerIdParameter, tradeTypeParameter, corporationIdParameter, commodityIdParameter, accountingEntityIdParameter, currencyIdParameter, contractCodeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<string> SPCalculateActualTotalAmount(string contractIdStr)
        {
            var contractIdStrParameter = contractIdStr != null ?
                new ObjectParameter("contractIdStr", contractIdStr) :
                new ObjectParameter("contractIdStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPCalculateActualTotalAmount", contractIdStrParameter);
        }
    
        public virtual ObjectResult<string> SPCalculateAmountFutureValueHappened(string contractIdStr)
        {
            var contractIdStrParameter = contractIdStr != null ?
                new ObjectParameter("contractIdStr", contractIdStr) :
                new ObjectParameter("contractIdStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPCalculateAmountFutureValueHappened", contractIdStrParameter);
        }
    
        public virtual ObjectResult<string> SPCalculateAmountHappened(string contractIdStr)
        {
            var contractIdStrParameter = contractIdStr != null ?
                new ObjectParameter("contractIdStr", contractIdStr) :
                new ObjectParameter("contractIdStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPCalculateAmountHappened", contractIdStrParameter);
        }
    
        public virtual ObjectResult<string> SPCalculateAmoutApplied(string contractIdStr)
        {
            var contractIdStrParameter = contractIdStr != null ?
                new ObjectParameter("contractIdStr", contractIdStr) :
                new ObjectParameter("contractIdStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPCalculateAmoutApplied", contractIdStrParameter);
        }
    
        public virtual ObjectResult<string> SPCalculateCommodityHappened(string contractIdStr)
        {
            var contractIdStrParameter = contractIdStr != null ?
                new ObjectParameter("contractIdStr", contractIdStr) :
                new ObjectParameter("contractIdStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPCalculateCommodityHappened", contractIdStrParameter);
        }
    
        public virtual ObjectResult<string> SPCalculateContractWeight(string contractIdStr)
        {
            var contractIdStrParameter = contractIdStr != null ?
                new ObjectParameter("contractIdStr", contractIdStr) :
                new ObjectParameter("contractIdStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPCalculateContractWeight", contractIdStrParameter);
        }
    
        public virtual ObjectResult<string> SPCalculateInvoiceApplied(string contractIdStr)
        {
            var contractIdStrParameter = contractIdStr != null ?
                new ObjectParameter("contractIdStr", contractIdStr) :
                new ObjectParameter("contractIdStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPCalculateInvoiceApplied", contractIdStrParameter);
        }
    
        public virtual ObjectResult<string> SPCalculateInvoiceFutureValueHappened(string contractIdStr)
        {
            var contractIdStrParameter = contractIdStr != null ?
                new ObjectParameter("contractIdStr", contractIdStr) :
                new ObjectParameter("contractIdStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPCalculateInvoiceFutureValueHappened", contractIdStrParameter);
        }
    
        public virtual ObjectResult<string> SPCalculateInvoiceHappened(string contractIdStr)
        {
            var contractIdStrParameter = contractIdStr != null ?
                new ObjectParameter("contractIdStr", contractIdStr) :
                new ObjectParameter("contractIdStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPCalculateInvoiceHappened", contractIdStrParameter);
        }
    
        public virtual ObjectResult<SPGenerateInvoiceReport_Result> SPGenerateInvoiceReport(string commodityIdList, string departmentIdList, string contractIdList, Nullable<int> customerId, string contractCode, Nullable<bool> isReceive, Nullable<int> commodityId, Nullable<int> corporationId, Nullable<int> departmentId, Nullable<int> unitId, Nullable<int> currencyId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> pageSize, Nullable<int> pageIndex)
        {
            var commodityIdListParameter = commodityIdList != null ?
                new ObjectParameter("CommodityIdList", commodityIdList) :
                new ObjectParameter("CommodityIdList", typeof(string));
    
            var departmentIdListParameter = departmentIdList != null ?
                new ObjectParameter("DepartmentIdList", departmentIdList) :
                new ObjectParameter("DepartmentIdList", typeof(string));
    
            var contractIdListParameter = contractIdList != null ?
                new ObjectParameter("ContractIdList", contractIdList) :
                new ObjectParameter("ContractIdList", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var isReceiveParameter = isReceive.HasValue ?
                new ObjectParameter("IsReceive", isReceive) :
                new ObjectParameter("IsReceive", typeof(bool));
    
            var commodityIdParameter = commodityId.HasValue ?
                new ObjectParameter("CommodityId", commodityId) :
                new ObjectParameter("CommodityId", typeof(int));
    
            var corporationIdParameter = corporationId.HasValue ?
                new ObjectParameter("CorporationId", corporationId) :
                new ObjectParameter("CorporationId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGenerateInvoiceReport_Result>("SPGenerateInvoiceReport", commodityIdListParameter, departmentIdListParameter, contractIdListParameter, customerIdParameter, contractCodeParameter, isReceiveParameter, commodityIdParameter, corporationIdParameter, departmentIdParameter, unitIdParameter, currencyIdParameter, startDateParameter, endDateParameter, pageSizeParameter, pageIndexParameter);
        }
    
        public virtual int SPListSettleUnfinishedCustomers(Nullable<int> excutorId, Nullable<int> corporationId, Nullable<int> customerId, Nullable<int> accountEntityId, Nullable<int> currencyId, Nullable<short> tradeType)
        {
            var excutorIdParameter = excutorId.HasValue ?
                new ObjectParameter("ExcutorId", excutorId) :
                new ObjectParameter("ExcutorId", typeof(int));
    
            var corporationIdParameter = corporationId.HasValue ?
                new ObjectParameter("CorporationId", corporationId) :
                new ObjectParameter("CorporationId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var accountEntityIdParameter = accountEntityId.HasValue ?
                new ObjectParameter("AccountEntityId", accountEntityId) :
                new ObjectParameter("AccountEntityId", typeof(int));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var tradeTypeParameter = tradeType.HasValue ?
                new ObjectParameter("TradeType", tradeType) :
                new ObjectParameter("TradeType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPListSettleUnfinishedCustomers", excutorIdParameter, corporationIdParameter, customerIdParameter, accountEntityIdParameter, currencyIdParameter, tradeTypeParameter);
        }
    
        public virtual int SpMaintainCurrencyPair()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpMaintainCurrencyPair");
        }
    }
}
